#!/usr/bin/python3
# SPDX-License-Identifier: Apache-2.0

import json
import sys
import github

# A mapping between labels and projects to add when they're applied.
LABEL_PROJECTS = {
    "infrastructure": "Infrastructure",
    "amd sev": "SEV",
    "intel sgx": "SGX",
    "wasm": "WebAssembly",
}

# Get inputs from shell
(token, repository, path) = sys.argv[1:4]

# Initialize repo
repo = github.Github(token).get_repo(repository)

# Open Github event JSON
with open(path) as f:
    event = json.load(f)

# Determine whether the labels were added or removed
action = event["action"]

# Get the name of the label
label_name = event["label"]["name"]

# Determine content type: issue or PR, as well as content ID
try:
    content_type = "Issue"
    content_id = event["issue"]["id"]
except KeyError:
    content_type = "PullRequest"
    content_id = event["pull_request"]["id"]

# Fetch the project we want to add to or remove from
try:
    project = [p for p in repo.get_projects() if p.name == LABEL_PROJECTS[label_name]][0]
except KeyError:
    print("Label is not actionable.")
    sys.exit(0)

# If the label was added, we want to add to the project. If removed, we want to
# remove from the project.
if action == "labeled":
    project_column = project.get_columns()[1]
    try:
        project_column.create_card(content_id=content_id, content_type=content_type)
    except github.GithubException as e:
        error = e.data["errors"][0]
        if error["resource"] != "ProjectCard" or error["code"] != "unprocessable":
            raise
        print("Card already in project.")
elif action == "unlabeled":
    for column in project.get_columns():
        for card in column.get_cards():
            card_content = card.get_content()
            if card_content is not None and card_content.id == content_id:
                card.delete()
