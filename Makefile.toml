[config]
default_to_workspace = false

[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = "true"
CARGO_MAKE_WORKSPACE_EMULATION = true
CARGO_MAKE_CRATE_WORKSPACE_MEMBERS = [
	"crt0stack",
	"enarx-keep-sev",
	"enarx-keep-sev-shim",
	"enarx-keep-sgx",
	"enarx-keep-sgx-shim",
	"enumerate",
	"intel-types",
	"iocuddle",
	"iocuddle-sgx",
	"memory",
	"payload",
	"sallyport",
	"sev",
	"sev-show",
	"sevctl",
	"sgx-crypto",
	"sgx-show",
	"sgx-types",
	"span",
	"testing",
	"units",
	"vdso"
]
CARGO_WORKSPACE_ROOT = { script = ["git rev-parse --show-toplevel"] }

################### TASK DEFINITIONS ############################

[tasks.deny]
install_crate = "cargo-deny"
command = "cargo"
args = ["deny", "check", "licenses"]

[tasks.misc-lints-missing-docs]
command = "${CARGO_WORKSPACE_ROOT}/.tests/misc-lints-missing-docs"

[tasks.cargo-toml-package-edition]
install_script = [''' which toml || cargo install toml-cli ''']
command = "${CARGO_WORKSPACE_ROOT}/.tests/cargo-toml-package-edition"

[tasks.misc-lints-clippy-all]
command = "${CARGO_WORKSPACE_ROOT}/.tests/misc-lints-clippy-all"

[tasks.misc-licenses-rs-spdx]
command = "${CARGO_WORKSPACE_ROOT}/.tests/misc-licenses-rs-spdx"

[tasks.misc-licenses-asm-spdx]
command = "${CARGO_WORKSPACE_ROOT}/.tests/misc-licenses-asm-spdx"

[tasks.misc-diagrams]
command = "${CARGO_WORKSPACE_ROOT}/.tests/misc-diagrams"

[tasks.cargo-toml-package-license]
command = "${CARGO_WORKSPACE_ROOT}/.tests/cargo-toml-package-license"

[tasks.misc-licenses-crate]
command = "${CARGO_WORKSPACE_ROOT}/.tests/misc-licenses-crate"

[tasks.build-sgx-payload-reqs]
workspace = true
env = { "CARGO_MAKE_WORKSPACE_INCLUDE_MEMBERS" = ["enarx-keep-sgx", "enarx-keep-sgx-shim", "payload"] }
run_task = "build"

#Find paths required by the SGX payload test.
[tasks.find-sgx-paths]
dependencies = ["build-sgx-payload-reqs"]
env = { "SGX_KEEP" = { script = [
"find ${CARGO_WORKSPACE_ROOT}/enarx-keep-sgx/target/ -name enarx-keep-sgx"
] }, "SGX_SHIM" = { script = [
"find ${CARGO_WORKSPACE_ROOT}/enarx-keep-sgx-shim/target/ -name enarx-keep-sgx-shim"
] } }

# Find path for the payload for SGX and (future) SEV tests.
[tasks.find-payload]
dependencies = ["build-sgx-payload-reqs"]
env = { "PAYLOAD" = { script = [ "find ${CARGO_WORKSPACE_ROOT}/payload/target/ -name payload" ] } }

# Detects whether SGX is present on the system.
[tasks.detect-sgx]
env = { "SGX_SYSTEM" = { script = [ "[ -e '/dev/sgx/enclave' ] && echo true || echo false" ] } }

# Test that the payload binary runs correctly on SGX.
[tasks.run-sgx-payload]
dependencies = ["find-sgx-paths", "find-payload", "detect-sgx"]
condition = {env_set = ["SGX_KEEP", "PAYLOAD", "SGX_SHIM"], env = { "SGX_SYSTEM" = "true"} }
command = "${SGX_KEEP}"
args = ["--code", "${PAYLOAD}", "--shim", "${SGX_SHIM}"]

####################### FLOW DEFINITIONS ##########################

# Always run this task on the crate level.
[tasks.format]
workspace = true

# Always run this task on the crate level.
[tasks.build]
workspace = true

# Always run this task on the crate level.
[tasks.test]
workspace = true

# Always run this task on the crate level.
[tasks.dev-test-flow]
workspace = true

# Always run this task on the crate level.
[tasks.clean]
workspace = true

# Pre-ci tasks to be run at the top level.
[tasks.top-pre-ci-flow]
run_task = { name = "misc-diagrams" }

# Pre-ci tasks to be run at the crate level.
[tasks.crate-pre-ci-flow]
workspace = true
run_task = { name = [
	"cargo-toml-package-edition",
	"cargo-toml-package-license",
	"check-format",
	"deny",
	"misc-licenses-asm-spdx",
	"misc-licenses-crate",
	"misc-licenses-rs-spdx",
	"misc-lints-clippy-all",
	"misc-lints-missing-docs",
] }

# These ci tasks are meant to be run at the crate level.
# It is equivalent to the default ci flow, with these changes:
# 1. It does not include the test-flow, which should be run from 
#    top level.
# 2. It includes only the subset of the pre-ci-flow that should be
#    run at crate level.
[tasks.crate-level-ci]
workspace = true
run_task = { name = [
    "crate-pre-ci-flow", 
    "print-env-flow",
    "pre-build",
    "check-format-ci-flow",
    "clippy-ci-flow",
    "build",
    "post-build",
    "examples-ci-flow",
    "bench-ci-flow",
    "outdated-ci-flow",
    "ci-coverage-flow",
    "post-ci-flow"
] }

# The top level and crate level ci tasks have been separated, and are all
# called from here. crate-level-ci includes crate-level pre-ci-flow.
[tasks.ci-flow]
clear = true
run_task = { name = ["top-pre-ci-flow", "crate-level-ci", "test-flow"] }

# These are tests to run at the top level. Currently, including them in
# the post-test task achieves this. However, they do not *need* to be run
# as post-test if we require other, crate-level post-tests.
[tasks.post-test]
run_task = "run-sgx-payload"
