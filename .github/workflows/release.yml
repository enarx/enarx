name: release

on:
  workflow_dispatch:
  pull_request:
    branches:
    - main
  push:
    branches:
    - main
    tags:
    - "v*.*.*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-nix:
    strategy:
      matrix:
        platform:
        - host: macos-latest
          target: aarch64-apple-darwin
          test-bin: file ./result/bin/enarx
          test-oci: echo "OCI runtime not available, skip"

        - host: ubuntu-latest
          target: aarch64-unknown-linux-musl
          test-bin: nix shell --inputs-from . 'nixpkgs#qemu' -c qemu-aarch64 ./result/bin/enarx platform info
          test-oci: docker load < ./result
          # TODO: Run aarch64 binary within OCI

        - host: macos-latest
          target: x86_64-apple-darwin
          test-bin: ./result/bin/enarx platform info
          test-oci: echo "OCI runtime not available, skip"

        - host: ubuntu-latest
          target: x86_64-unknown-linux-musl
          test-bin: ./result/bin/enarx platform info
          test-oci: |
            docker load < ./result
            docker run --rm enarx:$(nix eval --raw .#enarx-x86_64-unknown-linux-musl-oci.imageTag) enarx platform info


    runs-on: ${{ matrix.platform.host }}
    steps:
    - uses: actions/checkout@v3
    - uses: DeterminateSystems/nix-installer-action@v4
      with:
        extra-conf: |
          accept-flake-config = true
    - uses: DeterminateSystems/magic-nix-cache-action@v2
    - uses: cachix/cachix-action@v12
      continue-on-error: true
      with:
        name: enarx
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

    - run: nix build -L --show-trace '.#enarx-${{ matrix.platform.target }}'
    - run: nix run --inputs-from . 'nixpkgs#coreutils' -- --coreutils-prog=ginstall -p ./result/bin/enarx "enarx-${{ matrix.platform.target }}"
    - uses: actions/upload-artifact@v3
      with:
        name: enarx-${{ matrix.platform.target }}
        path: enarx-${{ matrix.platform.target }}
    - run: ${{ matrix.platform.test-bin }}

    - run: nix build -L --show-trace '.#enarx-${{ matrix.platform.target }}-oci'
    - run: nix run --inputs-from . 'nixpkgs#coreutils' -- --coreutils-prog=ginstall -p ./result "enarx-${{ matrix.platform.target }}-oci"
    - uses: actions/upload-artifact@v3
      with:
        name: enarx-${{ matrix.platform.target }}-oci
        path: enarx-${{ matrix.platform.target }}-oci
    - run: ${{ matrix.platform.test-oci }}

  build-windows:
    name: enarx Windows build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Rust toolchain
        run: rustup show
      - run: cargo build --release
      - name: Add cargo-wix subcommand
        run: cargo install cargo-wix --version 0.3.3
      - name: Create output directory
        run: mkdir output
      - name: Copy files to output
        run: |
          cp target\release\enarx.exe output\
          cp LICENSE output\
          cp README.md output\
      - name: Create msi with wix
        run: cargo wix --no-build -p enarx --nocapture -I release\windows\main.wxs --output target\wix\enarx-x86_64-windows.msi
      - name: Rename artifact
        run: copy target\release\enarx.exe target\release\enarx-x86_64-windows.exe
      - uses: actions/upload-artifact@v3
        with:
          name: enarx-x86_64-windows
          path: target\release\enarx-x86_64-windows.exe
      - uses: actions/upload-artifact@v3
        with:
          name: enarx-x86_64-windows-msi
          path: target\wix\enarx-x86_64-windows.msi
      - run: .\target\release\enarx-x86_64-windows.exe platform info

  sign-x86_64:
    needs: build-nix
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: enarx-x86_64-unknown-linux-musl
    - run: chmod +x enarx-x86_64-unknown-linux-musl
    - name: Retrieve keep signing keys (main branch and tags)
      if: (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main') && github.event_name == 'push'
      id: signkey_retrieve
      env:
        SEV_ID_KEY: ${{ secrets.SEV_ID_KEY }}
        SEV_ID_KEY_SIGNATURE_BLOB: ${{ secrets.SEV_ID_KEY_SIGNATURE_BLOB }}
        SGX_KEY: ${{ secrets.SGX_KEY }}
      run: |
        base64 --decode <<<${SEV_ID_KEY} | gunzip > sev-id.key
        base64 --decode <<<${SEV_ID_KEY_SIGNATURE_BLOB} | gunzip > sev-id-key-signature.blob
        base64 --decode <<<${SGX_KEY} | gunzip > sgx.key
    - name: Generate the enarx keep signature (fork)
      if: steps.signkey_retrieve.conclusion == 'skipped'
      run: |
        ./enarx-x86_64-unknown-linux-musl key sgx create --out sgx.key
        ./enarx-x86_64-unknown-linux-musl key sev create --out sev-author.key
        ./enarx-x86_64-unknown-linux-musl key sev create --out sev-id.key
        ./enarx-x86_64-unknown-linux-musl key sev sign --author-key sev-author.key --id-key sev-id.key --out sev-id-key-signature.blob
    - name: Sign enarx keep
      run: ./enarx-x86_64-unknown-linux-musl sign --sgx-key sgx.key --sev-id-key sev-id.key --sev-id-key-signature sev-id-key-signature.blob --out enarx-x86_64-unknown-linux-musl.sig
    - name: Remove keys
      run: rm -f sgx.key sev-author.key sev-id.key sev-id-key-signature.blob
    - uses: actions/upload-artifact@v3
      with:
        name: enarx-x86_64-unknown-linux-musl-sig
        path: enarx-x86_64-unknown-linux-musl.sig

  build-lipo:
    needs: build-nix
    runs-on: macos-latest
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: enarx-aarch64-apple-darwin
    - uses: actions/download-artifact@v3
      with:
        name: enarx-x86_64-apple-darwin
    - run: lipo -create ./enarx-aarch64-apple-darwin ./enarx-x86_64-apple-darwin -output ./enarx-universal-darwin
    - uses: actions/upload-artifact@v3
      with:
        name: enarx-universal-darwin
        path: enarx-universal-darwin

  test-lipo:
    needs: build-lipo
    strategy:
      matrix:
        platform:
        - host: macos-latest
        - host: aarch64-apple-darwin

    runs-on: ${{ matrix.platform.host }}
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: enarx-universal-darwin
    - run: chmod +x ./enarx-universal-darwin
    - run: ./enarx-universal-darwin platform info

  # TODO: redevelop SBOM generation per issue #1954

  build-rpm:
    strategy:
      matrix:
        architecture:
        - x86_64
        - aarch64
    needs: [ build-nix, sign-x86_64 ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        name: "enarx-${{ matrix.architecture }}-unknown-linux-musl"
    - if: ${{ matrix.architecture == 'x86_64' }}
      uses: actions/download-artifact@v3
      with:
        name: "enarx-x86_64-unknown-linux-musl-sig"
    - id: version
      run: echo "version=$(cargo metadata --format-version=1 --no-deps | jq '.packages[] | select(.name == "enarx") | .version' --raw-output)" >>$GITHUB_OUTPUT
    - run: |
        rpmbuild -bb release/linux/rpm/enarx.spec \
        --define "%source_binary `pwd`/enarx-${{ matrix.architecture }}-unknown-linux-musl" \
        --define "%source_sig_x86_64 `pwd`/enarx-x86_64-unknown-linux-musl.sig" \
        --define "%source_license `pwd`/LICENSE" \
        --define "%version ${{ steps.version.outputs.version }}" \
        --define "_rpmdir `pwd`" \
        --target "${{ matrix.architecture }}"
    # Test the just-built RPM
    - if: ${{ matrix.architecture == 'x86_64' }}
      run: |
        sudo rpm -i "${{ matrix.architecture }}/enarx-${{ steps.version.outputs.version }}-1.${{ matrix.architecture }}.rpm"
        /usr/bin/enarx --version
    - uses: actions/upload-artifact@v3
      with:
        name: "enarx-${{ steps.version.outputs.version }}-1.${{ matrix.architecture }}.rpm"
        path: "${{ matrix.architecture }}/enarx-${{ steps.version.outputs.version }}-1.${{ matrix.architecture }}.rpm"
        if-no-files-found: error

  build-deb:
    strategy:
      matrix:
        architecture:
        - build: x86_64
          debarch: amd64
        - build: aarch64
          debarch: arm64
    needs: [ build-nix, sign-x86_64 ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        name: "enarx-${{ matrix.architecture.build }}-unknown-linux-musl"
    - if: ${{ matrix.architecture.build == 'x86_64' }}
      uses: actions/download-artifact@v3
      with:
        name: "enarx-x86_64-unknown-linux-musl-sig"
    - id: version
      run: echo "version=$(cargo metadata --format-version=1 --no-deps | jq '.packages[] | select(.name == "enarx") | .version' --raw-output)" >>$GITHUB_OUTPUT
    - run: |
        mkdir -p dpkg dpkg/DEBIAN dpkg/usr/bin
        cat release/linux/deb/control | sed -e 's/VERSION/${{ steps.version.outputs.version }}/' -e 's/ARCH/${{ matrix.architecture.debarch }}/' > dpkg/DEBIAN/control
        cp "enarx-${{ matrix.architecture.build }}-unknown-linux-musl" dpkg/usr/bin/enarx
        chmod +x dpkg/usr/bin/enarx
        sudo chown root:root dpkg/usr/bin/enarx
    - if: ${{ matrix.architecture.build == 'x86_64' }}
      run: |
        mkdir -p dpkg/usr/lib/enarx
        cp "enarx-x86_64-unknown-linux-musl.sig" dpkg/usr/lib/enarx/enarx.sig
        chmod 444 dpkg/usr/lib/enarx/enarx.sig
        sudo chown root:root dpkg/usr/lib/enarx/enarx.sig
    - run: |
        dpkg-deb --build dpkg
        mv dpkg.deb enarx_${{ steps.version.outputs.version }}-1_${{ matrix.architecture.debarch }}.deb
    # Test the just-built deb
    - if: ${{ matrix.architecture.build == 'x86_64' }}
      run: |
        sudo dpkg -i enarx_${{ steps.version.outputs.version }}-1_${{ matrix.architecture.debarch }}.deb
        /usr/bin/enarx --version
    - uses: actions/upload-artifact@v3
      with:
        name: "enarx_${{ steps.version.outputs.version }}-1_${{ matrix.architecture.debarch }}.deb"
        path: "enarx_${{ steps.version.outputs.version }}-1_${{ matrix.architecture.debarch }}.deb"
        if-no-files-found: error

  push_oci:
    needs: [ build-nix, sign-x86_64 ]
    permissions:
      actions: read
      packages: write
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: enarx-aarch64-unknown-linux-musl-oci
    - uses: actions/download-artifact@v3
      with:
        name: enarx-x86_64-unknown-linux-musl-oci
    - run: skopeo copy docker-archive:./enarx-aarch64-unknown-linux-musl-oci containers-storage:localhost/enarx:aarch64
    - run: skopeo copy docker-archive:./enarx-x86_64-unknown-linux-musl-oci containers-storage:localhost/enarx:x86_64
    - run: podman image ls
    - run: podman manifest create enarx:manifest
    - run: podman manifest add enarx:manifest containers-storage:localhost/enarx:aarch64 --arch=arm64
    - run: podman manifest add enarx:manifest containers-storage:localhost/enarx:x86_64 --arch=amd64
    - run: podman manifest inspect enarx:manifest
    - name: metadata
      id: metadata
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/enarx/enarx
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
        sep-tags: " "
    - name: add tags
      if: github.event_name == 'push'
      run: podman tag enarx:manifest ${{ steps.metadata.outputs.tags }}
    - name: push to GitHub Packages
      if: github.event_name == 'push'
      uses: redhat-actions/push-to-registry@v2
      with:
        tags: ${{ steps.metadata.outputs.tags }}
        username: ${{ github.actor }}
        password: ${{ github.token }}

  release:
    if: startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
    needs: [ build-nix, build-rpm, build-deb, test-lipo ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v3
    - id: version
      run: echo "version=$(cargo metadata --format-version=1 --no-deps | jq '.packages[] | select(.name == "enarx") | .version' --raw-output)" >>$GITHUB_OUTPUT
    - uses: actions/download-artifact@v3
      with:
        name: enarx-x86_64-windows
    - uses: actions/download-artifact@v3
      with:
        name: enarx-x86_64-windows-msi
    - uses: actions/download-artifact@v3
      with:
        name: enarx-x86_64-apple-darwin-oci
    - uses: actions/download-artifact@v3
      with:
        name: enarx-x86_64-unknown-linux-musl
    - uses: actions/download-artifact@v3
      with:
        name: enarx-x86_64-unknown-linux-musl-sig
    - uses: actions/download-artifact@v3
      with:
        name: enarx-x86_64-unknown-linux-musl-oci
    - uses: actions/download-artifact@v3
      with:
        name: enarx-aarch64-unknown-linux-musl
    - uses: actions/download-artifact@v3
      with:
        name: enarx-universal-darwin
    - uses: actions/download-artifact@v3
      with:
        name: "enarx_${{ steps.version.outputs.version }}-1_amd64.deb"
    - uses: actions/download-artifact@v3
      with:
        name: "enarx_${{ steps.version.outputs.version }}-1_arm64.deb"
    - uses: actions/download-artifact@v3
      with:
        name: "enarx-${{ steps.version.outputs.version }}-1.x86_64.rpm"
    - uses: actions/download-artifact@v3
      with:
        name: "enarx-${{ steps.version.outputs.version }}-1.aarch64.rpm"
    - uses: softprops/action-gh-release@v1
      with:
        draft: true
        prerelease: true
        generate_release_notes: true
        files: |
          enarx-x86_64-windows.exe
          enarx-x86_64-windows.msi
          enarx-x86_64-apple-darwin-oci
          enarx-x86_64-unknown-linux-musl
          enarx-x86_64-unknown-linux-musl.sig
          enarx-x86_64-unknown-linux-musl-oci
          enarx-aarch64-unknown-linux-musl
          enarx-universal-darwin
          enarx_${{ steps.version.outputs.version }}-1_amd64.deb
          enarx_${{ steps.version.outputs.version }}-1_arm64.deb
          enarx-${{ steps.version.outputs.version }}-1.x86_64.rpm
          enarx-${{ steps.version.outputs.version }}-1.aarch64.rpm
