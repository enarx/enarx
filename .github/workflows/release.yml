name: release

on:
  workflow_dispatch:
  pull_request:
    branches:
    - main
  push:
    branches:
    - main
    tags:
    - "v*.*.*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      matrix:
        platform:
        - host: macos-latest
          target: x86_64-apple-darwin
          nix: x86_64-darwin

        - host: ubuntu-20.04
          target: x86_64-unknown-linux-musl
          nix: x86_64-linux

        # - host: aarch64-apple-darwin
        #   target: aarch64-apple-darwin
        #   nix: aarch64-darwin

    runs-on: ${{ matrix.platform.host }}
    steps:
    - uses: actions/checkout@v2
    - uses: cachix/install-nix-action@v17
    - uses: cachix/cachix-action@v10
      with:
        name: enarx
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - name: Pre-build setup
      run: ${{ matrix.platform.setup }}

    - run: nix build -L ${{ matrix.platform.buildArgs }} '.#packages.${{ matrix.platform.nix }}.enarx-static'
    - run: nix run --inputs-from . 'nixpkgs#coreutils' -- --coreutils-prog=ginstall -p ./result/bin/enarx "enarx-${{ matrix.platform.target }}"
    - uses: actions/upload-artifact@v3
      with:
        name: enarx-${{ matrix.platform.target }}
        path: enarx-${{ matrix.platform.target }}

    - run: nix build -L ${{ matrix.platform.buildArgs }} '.#packages.${{ matrix.platform.nix }}.enarx-static-oci'
    - run: nix run --inputs-from . 'nixpkgs#coreutils' -- --coreutils-prog=ginstall -p ./result "enarx-${{ matrix.platform.target }}-oci"
    - uses: actions/upload-artifact@v3
      with:
        name: enarx-${{ matrix.platform.target }}-oci
        path: enarx-${{ matrix.platform.target }}-oci

  windows-build:
    name: enarx Windows build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Rust toolchain
        run: rustup show
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      - name: Add cargo-wix subcommand
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-wix --version 0.3.1
      - name: Create output directory
        run: mkdir output
      - name: Copy files to output
        run: |
          cp target\release\enarx.exe output\
          cp LICENSE output\
          cp README.md output\
      - name: Create msi with wix
        uses: actions-rs/cargo@v1
        with:
          command: wix
          args: --no-build --nocapture -I release\windows\main.wxs --output target\wix\enarx-windows.msi
      - uses: actions/upload-artifact@v3
        with:
          name: enarx-x86_64-windows
          path: target\release\enarx.exe
      - uses: actions/upload-artifact@v3
        with:
          name: enarx-x86_64-windows-msi
          path: target\wix\enarx-windows.msi

  # universal-binary:
  #   needs: build
  #   runs-on: macos-latest
  #   steps:
  #   - uses: actions/download-artifact@v3
  #     with:
  #       name: enarx-aarch64-apple-darwin
  #   - uses: actions/download-artifact@v3
  #     with:
  #       name: enarx-x86_64-apple-darwin
  #   - run: lipo -create ./enarx-aarch64-apple-darwin ./enarx-x86_64-apple-darwin -output ./enarx-universal-darwin
  #   - uses: actions/upload-artifact@v3
  #     with:
  #       name: enarx-universal-darwin
  #       path: enarx-universal-darwin

  test-bin:
    needs: build
    # needs: universal-binary
    strategy:
      matrix:
        platform:
        - host: ubuntu-20.04
          target: x86_64-unknown-linux-musl

        - host: macos-latest
          target: x86_64-apple-darwin

        # - host: aarch64-apple-darwin
        #   target: universal-darwin

        # TODO: Enable aarch64

    runs-on: ${{ matrix.platform.host }}
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: enarx-${{ matrix.platform.target }}
    - run: chmod +x ./enarx-${{ matrix.platform.target }}
    - run: ./enarx-${{ matrix.platform.target }} info

  test-windows:
    needs: windows-build
    runs-on: windows-latest
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: enarx-x86_64-windows
    - run: .\enarx.exe info

  test-oci:
    needs: build
    strategy:
      matrix:
        platform:
        - host: ubuntu-20.04
          target: x86_64-unknown-linux-musl

        # TODO: Enable aarch64 and MacOS

    runs-on: ${{ matrix.platform.host }}
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: enarx-${{ matrix.platform.target }}-oci
    - run: docker load < enarx-${{ matrix.platform.target }}-oci
    # TODO: Attempt to run `enarx info` within the loaded container

  Regenerate-BOM:
    uses: ./.github/workflows/sbom_manifest_action.yml

  release:
    if: startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
    needs: [ build, test-bin, test-oci, test-windows, Regenerate-BOM ]
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/download-artifact@v3
    - name: Display structure of downloaded files
      run: ls -R
    - uses: softprops/action-gh-release@v1
      with:
        draft: true
        prerelease: true
        files: |
          enarx-x86_64-windows
          enarx-x86_64-windows-msi
          enarx-x86_64-apple-darwin
          enarx-x86_64-apple-darwin-oci
          enarx-x86_64-unknown-linux-musl
          enarx-x86_64-unknown-linux-musl-oci
        # enarx-universal-darwin
